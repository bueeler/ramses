#  -------------------------------------------------------------------------
#  Copyright (C) 2018 BMW Car IT GmbH
#  -------------------------------------------------------------------------
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at https://mozilla.org/MPL/2.0/.
#  -------------------------------------------------------------------------

INCLUDE(FindPackageHandleStandardArgs)
SET(ramses-static-lib_VERSION @RAMSES_VERSION@)

@PACKAGE_INIT@

#tell ramses it's being linked statically
ADD_DEFINITIONS(-DRAMSES_LINK_STATIC)

FIND_PACKAGE(PkgConfig QUIET)

IF (ramses-sdk_INJECT_ROOT_PATH)
    GET_FILENAME_COMPONENT(ramses-sdk_INSTALL_ROOT @PACKAGE_PROJECT_INSTALL_STATIC_LIB@/../.. ABSOLUTE)
    SET(CMAKE_FIND_ROOT_PATH ${CMAKE_FIND_ROOT_PATH} ${ramses-sdk_INSTALL_ROOT})
ENDIF()


################################### headers ###################################
FIND_PATH(ramses-static-lib_INCLUDE_DIRS ramses-client.h
    HINTS @PACKAGE_PROJECT_INSTALL_HEADER@
)

################################### client libraries ###################################
FIND_LIBRARY(ramses-glslang_LIBRARY
    NAMES ramses-glslang
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

FIND_LIBRARY(ramses-client_LIBRARY
    NAMES ramses-client
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

################################### text libraries ###################################
FIND_LIBRARY(ramses-text_LIBRARY
    NAMES ramses-text
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

FIND_LIBRARY(freetype_LIBRARY
    NAMES freetype
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

FIND_LIBRARY(harfbuzz_LIBRARY
    NAMES harfbuzz
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

################################### framework libraries ###################################
FIND_LIBRARY(ramses-framework_LIBRARY
    NAMES ramses-framework
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

FIND_LIBRARY(lz4_LIBRARY
    NAMES lz4
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

FIND_LIBRARY(ramses-capu_LIBRARIES
    NAMES ramses-capu
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

# collect required variables
SET(ramses-framework_LIB_REQUIRED_VARS ramses-capu_LIBRARIES ramses-framework_LIBRARY lz4_LIBRARY)

################################### renderer libraries ###################################

# Process COMPONENT parameters

LIST(GET ramses-static-lib_FIND_COMPONENTS 0 RENDERER_PLATFORM)
LIST(LENGTH ramses-static-lib_FIND_COMPONENTS COMPONENTS_LENGTH)
IF(COMPONENTS_LENGTH GREATER 1)
    LIST(GET ramses-static-lib_FIND_COMPONENTS 1 GL_VERSION)
ELSE()
    SET(GL_VERSION NOTFOUND)
ENDIF()

FIND_LIBRARY(ramses-renderer_LIBRARY
    NAMES ramses-renderer-lib
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
)

set(ramses-sdk_EXTRA_LIBRARIES)

IF("${RENDERER_PLATFORM}" STREQUAL "WINDOWS")

    IF(NOT GL_VERSION)
        MESSAGE("Using OpenGL 4.2 as no OpenGL version was specified")
        SET(GL_VERSION "GL4.2")
    ENDIF()

    IF("${GL_VERSION}" STREQUAL "GL4.2")
        SET(PLATFORM_GL_LIB platform-windows-wgl-4-2-core)
    ELSEIF("${GL_VERSION}" STREQUAL "GL4.5")
        SET(PLATFORM_GL_LIB platform-windows-wgl-4-5)
    ELSEIF("${GL_VERSION}" STREQUAL "GLES3.0")
        SET(PLATFORM_GL_LIB platform-windows-wgl-es-3-0)
    ELSE()
        MESSAGE(FATAL_ERROR "OpenGL version ${GL_VERSION} not supported on platform ${RENDERER_PLATFORM}. Use one of [GL4.2, GL4.5, GLES3.0]")
    ENDIF()

    SET(ramses-renderer-platform-library-names
        ramses-renderer-lib
        ${PLATFORM_GL_LIB}
        Surface_Windows_WGL
        Window_Windows
        Context_WGL
        Device_GL
        EmbeddedCompositor_Dummy)

    # add additionally needed libs (at the end because of mingw case)
    list(APPEND ramses-sdk_EXTRA_LIBRARIES opengl32.lib psapi)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        list(APPEND ramses-sdk_EXTRA_LIBRARIES ws2_32 wsock32)
    endif()

ELSEIF("${RENDERER_PLATFORM}" STREQUAL "LINUX-X11")

    MESSAGE("Using OpenGL ES 3.0. Ignoring GL_VERSION")

    SET(ramses-renderer-platform-library-names
        ramses-renderer-lib
        platform-x11-egl-es-3-0
        Surface_X11_EGL
        Window_X11
        Context_EGL
        GLESv2
        Device_GL
        EGL
        X11
        EmbeddedCompositor_Dummy)

ELSEIF("${RENDERER_PLATFORM}" STREQUAL "LINUX-WAYLAND")

    MESSAGE("Using OpenGL ES 3.0. Ignoring GL_VERSION")

    SET(ramses-renderer-platform-library-names
        ramses-renderer-lib
        platform-wayland-ivi-egl-es-3-0
        WaylandUtilities
        PlatformFactory_Wayland_IVI_EGL
        PlatformFactory_Wayland_EGL
        Surface_Wayland_EGL
        Surface_EGL_Offscreen
        Window_Wayland
        Window_Wayland_IVI
        Context_EGL
        Device_GL
        GLESv2     # GLESv3 is implemented in GLESv2 (in mesa)
        EGL
        wayland-client
        wayland-server
        wayland-egl
        SystemCompositorController_Wayland_IVI
        EmbeddedCompositor_Dummy
        EmbeddedCompositor_Wayland
        TextureUploadingAdapter_Wayland
        WindowEventsPollingManager_Wayland
        Logger_Wayland)

ELSE()
    MESSAGE("please use component syntax, choose one of WINDOWS, LINUX-X11, LINUX-WAYLAND")
ENDIF()

# resolve all platform specific libraries in ${ramses-renderer-platform-library-names}
# set none if at least one is not found
FOREACH(lib IN LISTS ramses-renderer-platform-library-names)
    FIND_LIBRARY(${lib}_LIBRARY
        NAMES ${lib}
        HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@)

    IF(${lib}_LIBRARY)
        LIST(APPEND ramses-renderer-platform_LIBRARIES ${${lib}_LIBRARY})
    ELSE()
        MESSAGE(WARNING "Unresolved platform dependency: ${lib}")
        SET(ramses-renderer-platform_LIBRARIES)
        BREAK()
    ENDIF()
ENDFOREACH()

################################### create package from mandatory modules ###################################
FIND_PACKAGE_HANDLE_STANDARD_ARGS(ramses-static-lib
    FOUND_VAR     ramses-static-lib_FOUND
    REQUIRED_VARS ramses-renderer_LIBRARY
                  ramses-renderer-platform_LIBRARIES
                  ${ramses-framework_LIB_REQUIRED_VARS}
                  ramses-glslang_LIBRARY
                  ramses-client_LIBRARY
                  freetype_LIBRARY
                  harfbuzz_LIBRARY
                  ramses-static-lib_INCLUDE_DIRS
                  ramses-text_LIBRARY
    VERSION_VAR   ramses-static-lib_VERSION)

SET(ramses-static-lib_LIBRARIES
    ${ramses-renderer-platform_LIBRARIES}
    ${ramses-renderer_LIBRARY}
    ${ramses-framework_LIBRARY}
    ${ramses-capu_LIBRARIES}
    ${lz4_LIBRARY}
    ${ramses-client_LIBRARY}
    ${ramses-text_LIBRARY}
    ${ramses-glslang_LIBRARY}
    ${harfbuzz_LIBRARY}
    ${freetype_LIBRARY}
    ${ramses-sdk_EXTRA_LIBRARIES}
)

################################### append optional modules to package if found ###################################

# include optional modules
file(GLOB OPTIONAL_CONFIG_FILES "${CMAKE_CURRENT_LIST_DIR}/ramses-optional-*.cmake")
message(STATUS "Found ramses-static-lib optional configs: ${OPTIONAL_CONFIG_FILES}")
foreach(optionalconfig ${OPTIONAL_CONFIG_FILES})
    set(ramses-optional_LIBRARIES)
    include(${optionalconfig})
    list(APPEND ramses-static-lib_LIBRARIES ${ramses-optional_LIBRARIES})
endforeach()

# detect dlt (optional, not needed on Integrity)
IF (NOT "${CMAKE_SYSTEM_NAME}" MATCHES "Integrity")
    SET(ramses-framework_LIB_REQUIRED_VARS ${ramses-framework_LIB_REQUIRED_VARS} automotive-dlt_LIBRARIES)

    IF(PKG_CONFIG_FOUND)
        PKG_CHECK_MODULES(automotive-dlt automotive-dlt QUIET)
    ENDIF()

    IF (NOT automotive-dlt_FOUND)
        # try search regular lib, may find own one
        FIND_LIBRARY(automotive-dlt_LIBRARIES
            NAMES automotive-dlt
            HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
        )
    ENDIF()
    IF (automotive-dlt_LIBRARIES)
        LIST(APPEND ramses-static-lib_LIBRARIES ${automotive-dlt_LIBRARIES})
    ENDIF()
ENDIF()

# try link system dlt library (optional)
FIND_LIBRARY(dlt_LIBRARY NAMES dlt)

IF(dlt_LIBRARY)
    LIST(APPEND ramses-static-lib_LIBRARIES ${dlt_LIBRARY})
ENDIF()

# try link ivi-extension library
#  system libs
FIND_LIBRARY(wayland-ivi-extension_ivi-application_LIBRARY
    NAMES ivi-application
    )
FIND_LIBRARY(wayland-ivi-extension_ivi-controller_LIBRARY
    NAMES ivi-controller
    )
#  own lib
FIND_LIBRARY(wayland-ivi-extension_ramses_LIBRARY
    NAMES wayland-ivi-extension
    HINTS @PACKAGE_PROJECT_INSTALL_STATIC_LIB@
    )

IF (wayland-ivi-extension_ivi-application_LIBRARY AND wayland-ivi-extension_ivi-controller_LIBRARY)
    LIST(APPEND ramses-static-lib_LIBRARIES
        ${wayland-ivi-extension_ivi-application_LIBRARY}
        ${wayland-ivi-extension_ivi-controller_LIBRARY})
ELSEIF(wayland-ivi-extension_ramses_LIBRARY)
    LIST(APPEND ramses-static-lib_LIBRARIES
        ${wayland-ivi-extension_ramses_LIBRARY})
ENDIF()

################################### finalize package ###################################
message(STATUS "Found ramses-static-lib libs: ${ramses-static-lib_LIBRARIES}")
message(STATUS "Found ramses-static-lib includes: ${ramses-static-lib_INCLUDE_DIRS}")

MARK_AS_ADVANCED(
    ramses-static-lib_INCLUDE_DIRS
    ramses-static-lib_LIBRARIES
    ramses-static-lib_FOUND
)
